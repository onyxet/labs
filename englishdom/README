Для запуска тестового окружения - ./run.sh
1. Сборка всего необходимого проходила на ОС Ubuntu 16.10
2. Docker version 1.13.0
3. Docker-compose version 1.9.0
4. Мониторинг контейнеров заменил на cadvisor. Он умеет метрики генерировать по хостовым контейнерам
5. Мониторить регистри по ресурсам умеет тот-же cadvosir, а если нужен gui, то он интегрирован в gitlab
6. Базовый образ (onyxet/englishdom:7.1) собран на ubuntu, а не на centos, в целях удобства пакетника. Сервер приложений и статики выбран UWSGI, вместо fpm и nginx. Изменил корень проекта со специфического /var/www/public/ на /opt чтоб не плодить ещё операцию при билде контейнера. (По дефолту директории нет)
7. Не создавал два инстанса redis (один для gitlab, а один для приложений), считаю в тестовых целях бесполезным. Если нагрузка не высокая, то можно по разным базам писать в redis.
8. Gitlab работает на порту 10080 (Если отвечает 502, значит ещё подымает все компоненты)
   UWSGI работает на порту 80
   Cadvisor работает на порту 8099
   Memcache, redis, postgres на стандартных портах
   Registry (два экземпляра с разной авторизацией) с 5000 по 5004
9. Для того, чтоб использовать полноценно локальный регистри от docker нужно прописать в демоне --insecure-registry 127.0.0.1:5002 (Может валится run скрипт)
10. После того, как gitlab поднялся, нужно создать новый пароль и залогинится под пользователем root
11. Для того, чтоб проверить, что базовый образ запушился в репозиторий и им можно манипулировать, нужно создать репозиторий в группе root с именем php (аналог docker контейнера) и заглянуть во вкладку "Registry"
12. Пункт 3 по ТЗ автоматизировать достаточно трудоёмко (в плане автоматического создания проекта и подписания runner для выполнения задачи) по времени из-за процесса новой установки gitlab в контейнере, каждый раз, при запуске docker-compose.
13. Скрипт для GitLab CI и тестовый php скрипт положил в директорию "build-app".
Третий пункт не корректный со стороны деплоя контейнеров - Нельзя менять имена контейнеров (артефактов) в процессе ci/cd если не используются разные артефактории, регистри. В задаче один.
14. Не выдумывал никаких скриптов для тестирования, поэтому в .gitlab-ci.yml только шаблоны, названия скриптов.
15. onyxet/englishdom:7.1-app - Первичный compose запускает внешний базовый контейнер, с тестовым php календарём (Для проверки, что окружение CI будет работать)
15. Для отчистки окружения:
	1. docker stop $(docker ps -aq)
	2. docker rm $(docker ps -aq)
	3. docker volume rm $(docker volume ls -qf dangling=true)